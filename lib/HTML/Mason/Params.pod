#
# This documentation was automatically generated by the
# make_params_pod.pl script in the release
# directory of the CVS repository.
#
# Edit that script instead of this document.
#

=head1 NAME

HTML::Mason::Params - Mason configuration parameters

=head1 DESCRIPTION

This document lists all of the Mason configuration parameters that are
intended to be used by end users.

=head1 PERL AND APACHE NAMES

Each parameter has two names: a Perl version and an Apache version.
The Perl version uses C<lowercase_with_underscores>, while the Apache
version uses C<StudlyCaps> with a C<Mason> prefix. The conversion from
one version to the other is otherwise very predictable. For example,

=over 4

=item *

C<autohandler_name> C<E<lt>--E<gt>> C<MasonAutohandlerName>

=item *

C<comp_root> C<E<lt>--E<gt>> C<MasonCompRoot>

=item *

C<data_cache_defaults> C<E<lt>--E<gt>> C<MasonDataCacheDefaults>

=back

=head2 Where Apache Names Are Used

The Apache parameter names are used in the Apache configuration file
in an L<httpd-based configuration|HTML::Mason::Admin/configuration via
httpd.conf directives>. They are B<only> effective if you have

   PerlHandler HTML::Mason::ApacheHandler

in your C<httpd.conf>. They B<cannot> be used in conjunction with a
L<handler.pl-based configuration|HTML::Mason::Admin/Configuring via handler script>.

=head2 Where Perl Names Are Used

The Perl parameter names are used from Perl code, i.e. anywhere other
than the Apache configuration file. For example,

=over 4

=item *

In an L<handler.pl-based configuration|HTML::Mason::Admin/Configuring
via handler script>, you can pass most of these parameters to the
L<ApacheHandler|HTML::Mason::ApacheHandler> constructor.

=item *

In a L<standalone Mason script|HTML::Mason::Admin/Using Mason from a
standalone script>, you can pass most of these parameters to the
L<Interp|HTML::Mason::Interp> constructor.

=item *

When launching a L<subrequest|HTML::Mason::Devel/Subrequests>, you can
pass any of the C<HTML::Mason::Request> parameters to
L<make_subrequest|HTML::Mason::Request/item_make_subrequest>.

=back

=head1 PARAMETERS



=head2 allow_globals

=over 4

=item * Perl name:           allow_globals

=item * Apache name:         MasonAllowGlobals

=item * Type in httpd.conf:  list

=item * Default:             []

=item * Belongs to:          L<HTML::Mason::Compiler|HTML::Mason::Compiler>




=back

List of variable names, complete with prefix (C<$@%>), that you intend
to use as globals in components.  Normally global variables are
forbidden by C<strict>, but any variable mentioned in this list is
granted a reprieve via a "use vars" statement. For example:

    allow_globals => [qw($DBH %session)]

In a mod_perl environment, C<$r> (the request object) is automatically
added to this list.


=head2 apache_status_title

=over 4

=item * Perl name:           apache_status_title

=item * Apache name:         MasonApacheStatusTitle

=item * Type in httpd.conf:  string

=item * Default:             HTML::Mason status

=item * Belongs to:          L<HTML::Mason::ApacheHandler|HTML::Mason::ApacheHandler>




=back

Title that you want this ApacheHandler to appear as under
Apache::Status.  Default is "HTML::Mason status".  This is useful if
you create more than one ApacheHandler object and want them all
visible via Apache::Status.


=head2 args_method

=over 4

=item * Perl name:           args_method

=item * Apache name:         MasonArgsMethod

=item * Type in httpd.conf:  string

=item * Default:             mod_perl

=item * Belongs to:          L<HTML::Mason::ApacheHandler|HTML::Mason::ApacheHandler>




=back

Method to use for unpacking GET and POST arguments. The valid options
are 'CGI' and 'mod_perl'; these indicate that a C<CGI.pm> or
C<Apache::Request> object (respectively) will be created for the purposes
of argument handling.

'mod_perl' is the default and requires that you have installed the
C<Apache::Request> package.

If the args_method is 'CGI', the Mason request object (C<$m>) will have a
method called C<cgi_object> available.  This method returns the CGI
object used for argument processing.

If args_method is 'mod_perl', the C<$r> global is upgraded to an
Apache::Request object. This object inherits all Apache methods and
adds a few of its own, dealing with parameters and file uploads.  See
C<Apache::Request> for more information.

While Mason will load C<Apache::Request> or C<CGI> as needed at runtime, it
is recommended that you preload the relevant module either in your
F<httpd.conf> or F<handler.pl> file, as this will save some memory.


=head2 auto_send_headers

=over 4

=item * Perl name:           auto_send_headers

=item * Apache name:         MasonAutoSendHeaders

=item * Type in httpd.conf:  boolean

=item * Default:             1

=item * Belongs to:          C<HTML::Mason::Request::ApacheHandler>




=back

True or false, default is true.  Indicates whether Mason should
automatically send HTTP headers before sending content back to the
client. If you set to false, you should call C<$r-E<gt>send_http_header>
manually.

See the L<sending HTTP headers|HTML::Mason::Devel/sending HTTP headers> section of the developer's manual for more details about the automatic
header feature.


=head2 autoflush

=over 4

=item * Perl name:           autoflush

=item * Apache name:         MasonAutoflush

=item * Type in httpd.conf:  boolean

=item * Default:             0

=item * Belongs to:          L<HTML::Mason::Request|HTML::Mason::Request>




=back

True or false, default is false. Indicates whether to flush the output buffer
after every string is output. Turn on autoflush if you need to send partial
output to the client, for example in a progress meter.


=head2 autohandler_name

=over 4

=item * Perl name:           autohandler_name

=item * Apache name:         MasonAutohandlerName

=item * Type in httpd.conf:  string

=item * Default:             autohandler

=item * Belongs to:          L<HTML::Mason::Interp|HTML::Mason::Interp>




=back

File name used for L<autohandlers|HTML::Mason::Devel/autohandlers>. Default is "autohandler".


=head2 buffer_class

=over 4

=item * Perl name:           buffer_class

=item * Apache name:         MasonBufferClass

=item * Type in httpd.conf:  string

=item * Default:             HTML::Mason::Buffer

=item * Belongs to:          L<HTML::Mason::Request|HTML::Mason::Request>




=back

The class to use when creating buffers. Defaults to
L<HTML::Mason::Buffer|HTML::Mason::Buffer>.


=head2 code_cache_max_size

=over 4

=item * Perl name:           code_cache_max_size

=item * Apache name:         MasonCodeCacheMaxSize

=item * Type in httpd.conf:  string

=item * Default:             10485760

=item * Belongs to:          L<HTML::Mason::Interp|HTML::Mason::Interp>




=back

Specifies the maximum size, in bytes, of the in-memory code cache
where components are stored. Default is 10 MB. See the L<code cache|HTML::Mason::Admin/code cache> section of the administrator's manual
for further details.


=head2 comp_class

=over 4

=item * Perl name:           comp_class

=item * Apache name:         MasonCompClass

=item * Type in httpd.conf:  string

=item * Default:             HTML::Mason::Component

=item * Belongs to:          L<HTML::Mason::Compiler::ToObject|HTML::Mason::Compiler::ToObject>




=back

The class into which component objects are blessed.  This defaults to
L<HTML::Mason::Component|HTML::Mason::Component>.


=head2 comp_root

=over 4

=item * Perl name:           comp_root

=item * Apache name:         MasonCompRoot

=item * Type in httpd.conf:  list

=item * Default:             Varies

=item * Belongs to:          L<HTML::Mason::Resolver::File|HTML::Mason::Resolver::File>




=back

The component root marks the top of your component hierarchy and
defines how component paths are translated into real file paths. For
example, if your component root is F</usr/local/httpd/docs>, a component
path of F</products/index.html> translates to the file
F</usr/local/httpd/docs/products/index.html>.

Under L<Apache|HTML::Mason::ApacheHandler> and
L<CGI|HTML::Mason::CGIHandler>, comp_root defaults to the server's
document root. In standalone mode comp_root defaults to the current
working directory.

This parameter may be either a scalar or an array reference.  If it is
a scalar, it should be a filesystem path indicating the component
root. If it is an array reference, it should be of the following form:

 [ [ key1 => '/path/to/root' ],
   [ key2 => '/path/to/other/root' ] ]

The "keys" for each path must be unique names and their "values" must
be filesystem paths.  These paths will be searched in the provided
order whenever a component path must be resolved to a filesystem path.


=head2 compiler_class

=over 4

=item * Perl name:           compiler_class

=item * Apache name:         MasonCompilerClass

=item * Type in httpd.conf:  string

=item * Default:             HTML::Mason::Compiler::ToObject

=item * Belongs to:          L<HTML::Mason::Interp|HTML::Mason::Interp>




=back

The class to use when creating a compiler. Defaults to
L<HTML::Mason::Compiler|HTML::Mason::Compiler>.


=head2 current_time

=over 4

=item * Perl name:           current_time

=item * Apache name:         MasonCurrentTime

=item * Type in httpd.conf:  string

=item * Default:             real

=item * Belongs to:          L<HTML::Mason::Interp|HTML::Mason::Interp>




=back

Interpreter's notion of the current time (deprecated).


=head2 data_cache_api

=over 4

=item * Perl name:           data_cache_api

=item * Apache name:         MasonDataCacheApi

=item * Type in httpd.conf:  string

=item * Default:             1.1

=item * Belongs to:          L<HTML::Mason::Request|HTML::Mason::Request>




=back

The C<$m-E<gt>cache> API to use. '1.1', the default, indicates the newer
API L<documented in this manual|HTML::Mason::Request/item_cache>.
'1.0' indicates the old API documented in 1.0x and earlier. This
compatibility layer is provided as a convenience for users upgrading
from older versions of Mason, but will not be supported indefinitely.


=head2 data_cache_defaults

=over 4

=item * Perl name:           data_cache_defaults

=item * Apache name:         MasonDataCacheDefaults

=item * Type in httpd.conf:  hash_list

=item * Default:             None

=item * Belongs to:          L<HTML::Mason::Request|HTML::Mason::Request>




=back

A hash reference of default options to use for the C<$m-E<gt>cache>
command. For example, to use the C<MemoryCache> implementation
by default,

    data_cache_defaults => {cache_class => 'MemoryCache'}

These settings are overriden by options given to particular
C<$m-E<gt>cache> calls.


=head2 data_dir

=over 4

=item * Perl name:           data_dir

=item * Apache name:         MasonDataDir

=item * Type in httpd.conf:  string

=item * Default:             None

=item * Belongs to:          L<HTML::Mason::Interp|HTML::Mason::Interp>




=back

The data directory is a writable directory that Mason uses for various
features and optimizations: for example, component object files and
data cache files. Mason will create the directory on startup, if necessary, and set its
permissions according to the web server User/Group.

Under L<Apache|HTML::Mason::ApacheHandler>, data_dir defaults to a
directory called "mason" under the Apache server root. You will
need to change this on certain systems that assign a high-level
server root such as F</usr>!

In non-Apache environments, data_dir has no default. If it is left
unspecified, Mason will not use L<object files|HTML::Mason::Admin/object files>, and the default
L<data cache class|HTML::Mason::Request/item_cache> will be
C<MemoryCache> instead of C<FileCache>.


=head2 decline_dirs

=over 4

=item * Perl name:           decline_dirs

=item * Apache name:         MasonDeclineDirs

=item * Type in httpd.conf:  boolean

=item * Default:             1

=item * Belongs to:          L<HTML::Mason::ApacheHandler|HTML::Mason::ApacheHandler>




=back

True or false, default is true. Indicates whether Mason should decline
directory requests, leaving Apache to serve up a directory index or a
C<FORBIDDEN> error as appropriate. See the L<allowing directory requests|HTML::Mason::Admin/allowing directory requests> section of the administrator's manual
for more information about handling directories with Mason.


=head2 default_escape_flags

=over 4

=item * Perl name:           default_escape_flags

=item * Apache name:         MasonDefaultEscapeFlags

=item * Type in httpd.conf:  string

=item * Default:             []

=item * Belongs to:          L<HTML::Mason::Compiler|HTML::Mason::Compiler>




=back

Escape flags to apply to all <% %> expressions by default. The current
valid flags are

    h - escape for HTML ('<' => '&lt;', etc.)
    u - escape for URL (':' => '%3A', etc.)

The developer can override default escape flags on a per-expression
basis; see the L<escaping expressions|HTML::Mason::Devel/escaping expressions> section of the developer's manual.

If you want to set I<multiple> flags as the default, this should be
given as a reference to an array of flags.


=head2 dhandler_name

=over 4

=item * Perl name:           dhandler_name

=item * Apache name:         MasonDhandlerName

=item * Type in httpd.conf:  string

=item * Default:             dhandler

=item * Belongs to:          L<HTML::Mason::Request|HTML::Mason::Request>




=back

File name used for L<dhandlers|HTML::Mason::Devel/dhandlers>. Default is "dhandler".


=head2 error_format

=over 4

=item * Perl name:           error_format

=item * Apache name:         MasonErrorFormat

=item * Type in httpd.conf:  string

=item * Default:             Varies

=item * Belongs to:          L<HTML::Mason::Request|HTML::Mason::Request>




=back

Indicates how errors are formatted. The built-in choices are

=over

=item *

I<brief> - just the error message with no trace information

=item *

I<text> - a multi-line text format

=item *

I<line> - a single-line text format, with different pieces of information separated by tabs (useful for log files)

=item *

I<html> - a fancy html format

=back

The default format under L<Apache|HTML::Mason::ApacheHandler> and
L<CGI|HTML::Mason::CGIHandler> is either I<line> or I<html> depending
on whether the error mode is I<fatal> or I<output>, respectively. The
default for standalone mode is I<text>.

The formats correspond to C<HTML::Mason::Exception> methods named
as_I<format>. You can define your own format by creating an
appropriately named method; for example, to define an "xml" format,
create a method C<HTML::Mason::Exception::as_xml> patterned after one of
the built-in methods.


=head2 error_mode

=over 4

=item * Perl name:           error_mode

=item * Apache name:         MasonErrorMode

=item * Type in httpd.conf:  string

=item * Default:             Varies

=item * Belongs to:          L<HTML::Mason::Request|HTML::Mason::Request>




=back

Indicates how errors are returned to the caller.  The choices are
I<fatal>, meaning die with the error, and I<output>, meaning output
the error just like regular output.

The default under L<Apache|HTML::Mason::ApacheHandler> and
L<CGI|HTML::Mason::CGIHandler> is I<output>, causing the error to be
displayed in the browser.  The default for standalone mode is
I<fatal>.


=head2 escape_flags

=over 4

=item * Perl name:           escape_flags

=item * Apache name:         MasonEscapeFlags

=item * Type in httpd.conf:  hash_list

=item * Default:             None

=item * Belongs to:          L<HTML::Mason::Interp|HTML::Mason::Interp>




=back

A hash reference of escape flags to set for this object.  See the
section on the L<set_escape
method|HTML::Mason::Interp/item_set_escape> for more details.


=head2 ignore_warnings_expr

=over 4

=item * Perl name:           ignore_warnings_expr

=item * Apache name:         MasonIgnoreWarningsExpr

=item * Type in httpd.conf:  regex

=item * Default:             qr/Subroutine .* redefined/i

=item * Belongs to:          L<HTML::Mason::Interp|HTML::Mason::Interp>




=back

Regular expression indicating which warnings to ignore when loading
components. Any warning that is not ignored will prevent the
component from being loaded and executed. For example:

    ignore_warnings_expr =>
        'Global symbol.*requires explicit package'

If undef, all warnings are heeded; if '.', all warnings are ignored.

By default, this is set to 'Subroutine .* redefined'.  This allows you
to declare global subroutines inside <%once> sections and not receive
an error when the component is reloaded.


=head2 in_package

=over 4

=item * Perl name:           in_package

=item * Apache name:         MasonInPackage

=item * Type in httpd.conf:  string

=item * Default:             HTML::Mason::Commands

=item * Belongs to:          L<HTML::Mason::Compiler::ToObject|HTML::Mason::Compiler::ToObject>




=back

This is the package in which a component's code is executed.  For
historical reasons, this defaults to C<HTML::Mason::Commands>.


=head2 interp_class

=over 4

=item * Perl name:           interp_class

=item * Apache name:         MasonInterpClass

=item * Type in httpd.conf:  string

=item * Default:             HTML::Mason::Interp

=item * Belongs to:          L<HTML::Mason::ApacheHandler|HTML::Mason::ApacheHandler>




=back

The class to use when creating a interpreter. Defaults to
L<HTML::Mason::Interp|HTML::Mason::Interp>.


=head2 lexer_class

=over 4

=item * Perl name:           lexer_class

=item * Apache name:         MasonLexerClass

=item * Type in httpd.conf:  string

=item * Default:             HTML::Mason::Lexer

=item * Belongs to:          L<HTML::Mason::Compiler|HTML::Mason::Compiler>




=back

The class to use when creating a lexer. Defaults to L<HTML::Mason::Lexer|HTML::Mason::Lexer>.


=head2 max_recurse

=over 4

=item * Perl name:           max_recurse

=item * Apache name:         MasonMaxRecurse

=item * Type in httpd.conf:  string

=item * Default:             32

=item * Belongs to:          L<HTML::Mason::Request|HTML::Mason::Request>




=back

The maximum recursion depth for the component stack, for the request
stack, and for the inheritance stack. An error is signalled if the
maximum is exceeded.  Default is 32.


=head2 out_method

=over 4

=item * Perl name:           out_method

=item * Apache name:         MasonOutMethod

=item * Type in httpd.conf:  code

=item * Default:             Print to STDOUT

=item * Belongs to:          L<HTML::Mason::Request|HTML::Mason::Request>




=back

Indicates where to send output. If out_method is a reference to a
scalar, output is appended to the scalar.  If out_method is a
reference to a subroutine, the subroutine is called with each output
string. For example, to send output to a file called "mason.out":

    my $fh = new IO::File ">mason.out";
    ...
    out_method => sub { $fh->print($_[0]) }

By default, out_method prints to standard output. Under
L<Apache|HTML::Mason::ApacheHandler>, standard output is
redirected to C<< $r->print >>.


=head2 postamble

=over 4

=item * Perl name:           postamble

=item * Apache name:         MasonPostamble

=item * Type in httpd.conf:  string

=item * Default:             None

=item * Belongs to:          L<HTML::Mason::Compiler::ToObject|HTML::Mason::Compiler::ToObject>




=back

Text given for this parameter is placed at the end of each component. See also L<preamble|HTML::Mason::Params/preamble>.


=head2 postprocess_perl

=over 4

=item * Perl name:           postprocess_perl

=item * Apache name:         MasonPostprocessPerl

=item * Type in httpd.conf:  code

=item * Default:             None

=item * Belongs to:          L<HTML::Mason::Compiler|HTML::Mason::Compiler>




=back

Sub reference that is called to postprocess the Perl portion of a
compiled component, just before it is assembled into its final
subroutine form.  The sub is called with a single parameter, a scalar
reference to the Perl portion of the component.  The sub is expected
to process the string in-place. See also
L<preprocess|HTML::Mason::Params/preprocess> and L<postprocess_text|HTML::Mason::Params/postprocess_text>.


=head2 postprocess_text

=over 4

=item * Perl name:           postprocess_text

=item * Apache name:         MasonPostprocessText

=item * Type in httpd.conf:  code

=item * Default:             None

=item * Belongs to:          L<HTML::Mason::Compiler|HTML::Mason::Compiler>




=back

Sub reference that is called to postprocess the text portion of a
compiled component, just before it is assembled into its final
subroutine form.  The sub is called with a single parameter, a scalar
reference to the text portion of the component.  The sub is expected
to process the string in-place. See also
L<preprocess|HTML::Mason::Params/preprocess> and L<postprocess_perl|HTML::Mason::Params/postprocess_perl>.


=head2 preamble

=over 4

=item * Perl name:           preamble

=item * Apache name:         MasonPreamble

=item * Type in httpd.conf:  string

=item * Default:             None

=item * Belongs to:          L<HTML::Mason::Compiler::ToObject|HTML::Mason::Compiler::ToObject>




=back

Text given for this parameter is placed at the beginning of each component. See also L<postamble|HTML::Mason::Params/postamble>.


=head2 preloads

=over 4

=item * Perl name:           preloads

=item * Apache name:         MasonPreloads

=item * Type in httpd.conf:  list

=item * Default:             None

=item * Belongs to:          L<HTML::Mason::Interp|HTML::Mason::Interp>




=back

A list of component paths, optionally with glob wildcards, to load
when the interpreter initializes. e.g.

    preloads => ['/foo/index.html','/bar/*.pl']

Default is the empty list.  For maximum performance, this should only
be used for components that are frequently viewed and rarely updated.
See the L<preloading components|HTML::Mason::Admin/preloading components> section of the administrator's manual for further details.

As mentioned in the developer's manual, a component's C<< <%once> >>
section is executed when it is loaded.  For preloaded components, this
means that this section will be executed before a Mason or Apache
request exist, so preloading a component that uses C<$m> or C<$r> in a
C<< <%once> >> section will fail.


=head2 preprocess

=over 4

=item * Perl name:           preprocess

=item * Apache name:         MasonPreprocess

=item * Type in httpd.conf:  code

=item * Default:             None

=item * Belongs to:          L<HTML::Mason::Compiler|HTML::Mason::Compiler>




=back

Sub reference that is called to preprocess each component before the compiler does
it's magic.  The sub is called with a single parameter, a scalar reference
to the script.  The sub is expected to process the script in-place.   This is
one way to extend the HTML::Mason syntax with new tags, etc., although a much
more flexible way is to subclass the Lexer or Compiler class. See also
L<postprocess_text|HTML::Mason::Params/postprocess_text> and L<postprocess_perl|HTML::Mason::Params/postprocess_perl>.


=head2 request_class

=over 4

=item * Perl name:           request_class

=item * Apache name:         MasonRequestClass

=item * Type in httpd.conf:  string

=item * Default:             HTML::Mason::Request

=item * Belongs to:          L<HTML::Mason::Interp|HTML::Mason::Interp>




=back

The class to use when creating requests. Defaults to
L<HTML::Mason::Request|HTML::Mason::Request>.


=head2 resolver_class

=over 4

=item * Perl name:           resolver_class

=item * Apache name:         MasonResolverClass

=item * Type in httpd.conf:  string

=item * Default:             HTML::Mason::Resolver::File

=item * Belongs to:          L<HTML::Mason::Interp|HTML::Mason::Interp>




=back

The class to use when creating a resolver. Defaults to
L<HTML::Mason::Resolver::File|HTML::Mason::Resolver::File>.


=head2 static_source

=over 4

=item * Perl name:           static_source

=item * Apache name:         MasonStaticSource

=item * Type in httpd.conf:  boolean

=item * Default:             0

=item * Belongs to:          L<HTML::Mason::Interp|HTML::Mason::Interp>




=back

True or false, default is false. When false, Mason checks the
timestamp of the component source file each time the component is used
to see if it has changed. This provides the instant feedback for
source changes that is expected for development.  However it does
entail a file stat for each component executed.

When true, Mason assumes that the component source tree is unchanging:
it will not check component source files to determine if the memory
cache or object file has expired.  This can save many file stats per
request. However, in order to get Mason to recognize a component
source change, you must remove object files and restart the server (so
as to clear the memory cache).

Use this feature for live sites where performance is crucial and
where updates are infrequent and well-controlled.


=head2 subcomp_class

=over 4

=item * Perl name:           subcomp_class

=item * Apache name:         MasonSubcompClass

=item * Type in httpd.conf:  string

=item * Default:             HTML::Mason::Component::Subcomponent

=item * Belongs to:          L<HTML::Mason::Compiler::ToObject|HTML::Mason::Compiler::ToObject>




=back

The class into which subcomponent objects are blessed.  This defaults
to L<HTML::Mason::Component::Subcomponent|HTML::Mason::Component::Subcomponent>.


=head2 use_object_files

=over 4

=item * Perl name:           use_object_files

=item * Apache name:         MasonUseObjectFiles

=item * Type in httpd.conf:  boolean

=item * Default:             1

=item * Belongs to:          L<HTML::Mason::Interp|HTML::Mason::Interp>




=back

True or false, default is true.  Specifies whether Mason creates
object files to save the results of component parsing. You may want to
turn off object files for disk space reasons, but otherwise this
should be left alone.


=head2 use_strict

=over 4

=item * Perl name:           use_strict

=item * Apache name:         MasonUseStrict

=item * Type in httpd.conf:  boolean

=item * Default:             1

=item * Belongs to:          L<HTML::Mason::Compiler::ToObject|HTML::Mason::Compiler::ToObject>




=back

True or false, default is true. Indicates whether or not a given
component should C<use strict>.










